# -*- coding: utf-8 -*-
"""Lista4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1biVonxMUc2X1BLnx15bnVh3FX7OhHGm_

1. Escreva uma função em Python para ordenar um vetor de inteiros em ordem crescente usando o
algoritmo de seleção.
"""

def select_sort(vetor):
  n=len(vetor)
  for i in range(n):
    id_min=i
    for j in range(i+1,n):
      if vetor[id_min]>vetor[j]:
        id_min=j
    aux=vetor[i]
    vetor[i]=vetor[id_min]
    vetor[id_min]=aux
  return (vetor)

"""2. Escreva uma função em Python para ordenar um vetor de inteiros, ele deve receber um parâmetro que
serve como chave para realizar a ordenação crescente ou decrescente.
"""

valores = [5, 2, 9, 1, 7, 3]

def ordenar_vetor(vetor, crescente=True):
    return sorted(vetor, reverse=not crescente)

print("Crescente:", ordenar_vetor(valores, crescente=True))
print("Decrescente:", ordenar_vetor(valores, crescente=False))

"""3. Escreva um programa que encontre o elemento máximo em um vetor de inteiros não ordenado sem
usar a função `max()`. Em seguida, encontre o elemento mínimo sem usar a função `min()`.
"""

valores = [5, 2, 9, 1, 7, 3]
maior = 0
menor = 0

for i in range(len(valores)):
  if i == 0:
    maior = valores[i]
    menor = valores[i]
  else:
    if valores[i] > maior:
      maior = valores[i]
    elif valores[i] < menor:
      menor = valores[i]

print(maior)
print(menor)

"""4. Crie uma função que recebe um vetor de números inteiros e retorna o segundo menor número.
Certifique-se de que sua função funcione mesmo se houver números duplicados no vetor.
"""

valores = [5, 2, 9, 1, 7, 3]
valores = select_sort(valores)

def descobrirmenor2(vetor):
  p = 1
  p2 = 2
  for i in range(len(vetor)):
    if p2 == len(vetor):
      return(valores[p])
      break
    if vetor[p] == vetor[p2]:
      p += 1
      p2 += 1
    else:
      return(vetor[p])
      break

menor2 = descobrirmenor2(valores)
print(menor2)

"""5. Implemente uma função que aceite um vetor de números inteiros e remova todos os elementos
duplicados, retornando o vetor resultante sem duplicatas. Não é perimitido utilizar a função “set()”
"""

from random import randint

lista5 = []

for i in range(20):
    lista5.append(randint(10, 29))

print(lista5)

def sem_repetidos(vetor, vetor2):
  for valor in vetor:
    if valor not in vetor2:
        vetor2.append(valor)
  return vetor2

lista5_1 = []
sem_repetidos(lista5, lista5_1)
print(lista5_1)

"""6. Escreva um programa que ordene um vetor de inteiros em ordem decrescente e, em seguida, conte
quantos números pares e quantos números ímpares existem no vetor ordenado.
"""

valores = [5, 2, 9, 1, 7, 3]

def ordenar_vetor(vetor, crescente=True):
    return sorted(vetor, reverse=not crescente)


valores = ordenar_vetor(valores, crescente=False)
contador1 = 0
for valor in valores:
  if valor % 2 == 0:
    contador1 += 1
contador2 = 0
for valor in valores:
  if valor % 2 != 0:
      contador2 += 1

print("Quantidade de pares:", contador1)
print("Quantidade de impares:", contador2)
print(valores)

"""7. Crie uma função que aceite um vetor de números inteiros e retorne o terceiro maior número.
Certifique-se de que sua função funcione mesmo se houver números duplicados no vetor.
"""

from random import randint

lista7 = []

for i in range(20):
    lista7.append(randint(10, 29))
lista7 = select_sort(lista7)

def descobrirmaior3(vetor):
  p = -1
  p2 = -2
  p3 = -3
  for i in range(len(vetor)):
    unicos = list(set(vetor))
    return(unicos[-3])
maior3 = descobrirmaior3(lista7)
print(lista7)
print(maior3)

"""8. Crie uma função que receba um vetor de números inteiros e retorne a mediana, ou seja, o valor do
meio quando o vetor é ordenado. Certifique-se de que sua função funcione para vetores com um
número ímpar de elementos.
"""

lista8 = []

for i in range(20):
    lista8.append(randint(10, 29))
lista8 = select_sort(lista8)

def mediana(vetor):
  if len(vetor) % 2 == 0:
    return (vetor[len(vetor) // 2 - 1] + vetor[len(vetor) // 2]) / 2
  else:
    return vetor[len(vetor) // 2]

lista8mediana = mediana(lista8)
print(lista8)
print(lista8mediana)